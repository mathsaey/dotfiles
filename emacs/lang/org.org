#+TITLE: Org mode config
#+AUTHOR: Mathijs Saey
#+FILETAGS: :config:

* Packages
We use [[https://github.com/Somelauw/evil-org-mode/blob/master/doc/keythemes.org][evil-org]] to add a bunch of vim-like keybindings to org-mode.

#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :after org
  :config
   (require 'evil-org)
   (add-hook 'org-mode-hook 'evil-org-mode))
#+END_SRC

[[https://github.com/alphapapa/helm-org-rifle][helm-org-rifle]] allows us to easily find things in our org-agenda-files.

#+BEGIN_SRC emacs-lisp
(use-package helm-org-rifle)
#+END_SRC

[[https://github.com/xuchunyang/grab-mac-link.el][grab-mac-link]] makes it easy to insert links from external applications.

#+BEGIN_SRC emacs-lisp
(use-package grab-mac-link)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC

* Custom Functions

Inserts an org link from some external program.

#+BEGIN_SRC emacs-lisp
(defun m/org-insert-external-link ()
  (interactive)
  (let ((apps 
    '((?f . finder)
      (?w . firefox)
      (?m . mail)
      (?s . skim))))
    (let ((message-log-max nil))
      (message "Grab link from: Finder [f], Firefox [w], Mail [m], or Skim [s]"))
    (setq app (cdr (assq (read-char-exclusive) apps)))
    (insert (grab-mac-link app 'org))))
#+END_SRC

By default, ~org-switchb~ behaves differently depending on the prefix
key that was used. We use the ~org-switchb~ on agenda files only, so
we'll create a function that sets the appropriate prefix key first. 
Based on [[https://stackoverflow.com/questions/6156286/emacs-lisp-call-function-with-prefix-argument-programmatically][this stackoverflow question]].

Note that this will only work for open files. Since the agenda opens
all org files, this should not be an issue.

#+BEGIN_SRC emacs-lisp
(defun m/org-agenda-switchb ()
  (interactive)
  (let ((current-prefix-arg '(16)))
    (call-interactively 'org-switchb)))
#+END_SRC

* Files

All of the org files will be stored in the [[file:~/NextCloud/org/][org folder]].
Capturing happens in dedicated files, archiving happens in its own folder.
Exports are stored in the [[file:~/Nextcloud/org/exports/][exports folder]].

#+BEGIN_SRC emacs-lisp
(defconst m-org-main-dir     (expand-file-name "~/NextCloud/org/"))
(defconst m-org-exports-dir  (expand-file-name "exports" m-org-main-dir))
(defconst m-org-archive-dir  (expand-file-name "archive" m-org-main-dir))

(defconst m-org-capture-todo     (expand-file-name "todo.org" m-org-main-dir))
(defconst m-org-capture-notes    (expand-file-name "notes.org" m-org-main-dir))
(defconst m-org-capture-journal  (expand-file-name "journal.org" m-org-main-dir))
(defconst m-org-capture-meetings (expand-file-name "meetings.org" m-org-main-dir))
#+END_SRC

Let's set the org-directory, and default note file for good measure.

#+BEGIN_SRC emacs-lisp
(setq org-directory m-org-main-dir)
(setq org-default-note-file m-org-capture-todo)
#+END_SRC

We should also make sure org-agenda knows where to look for entries.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (list m-org-main-dir))
#+END_SRC

Every time we archive something, we put a corresponding file in the
archive directory.

#+BEGIN_SRC emacs-lisp
(setq org-archive-location (expand-file-name "%s::" m-org-archive-dir))
#+END_SRC

We export files to a custom directory, org mode does not have built-in
support for this, so we use an advice.

Disabled for now.

#+BEGIN_SRC emacs-lisp
(defun m/org-export-file-name (orig-fun extension &optional subtreep pub-dir)
  (unless pub-dir
    (setq pub-dir m-org-exports-dir)
  (apply orig-fun extension subtreep pub-dir nil)))
;; (advice-add 'org-export-output-file-name :around #'m/org-export-file-name)
#+END_SRC

* Keybinds
** Local

Set up the key-themes for evil org.

#+BEGIN_SRC emacs-lisp
(require 'evil-org)
(evil-org-set-key-theme
  '(navigation additional textobjects shift todo heading return))
#+END_SRC

Make =0= jump to the text of the header instead of the bullet.

#+BEGIN_SRC emacs-lisp
(setq org-special-ctrl-a t)
#+END_SRC

Make =>= and =<= promote/demote of a heading.

#+BEGIN_SRC emacs-lisp
(general-define-key
  :states  'normal
  :keymaps 'evil-org-mode-map
  ">" 'org-metaright
  "<" 'org-metaleft)
#+END_SRC

Add some additional keybindings to =<localleader>= in org mode.

#+BEGIN_SRC emacs-lisp
(general-define-key
  :states  'normal
  :keymaps 'org-mode-map
  :prefix  "\\"

  "r" 'org-refile
  "d" 'org-deadline
  "s" 'org-schedule
  "t" 'org-set-tags
  "f" 'org-sparse-tree
  "p" 'org-set-property
  "x" 'org-edit-special
  "c" 'org-ctrl-c-ctrl-c
  "l" 'org-open-at-point
  "a" 'org-archive-subtree
  "e" 'org-export-dispatch
  "u" 'org-table-recalculate
  "y" 'org-time-stamp
  "Y" 'org-time-stamp-inactive
  "ol" 'org-insert-link
  "g" 'm/org-insert-external-link)
#+END_SRC

** Global

We want easy access to the org-agenda, to org-capture, and to the
org-switchb. Let's also make it possible to create a link from anywhere.
All global org-mode keybinds are prefixed with =<leader>o=.

#+BEGIN_SRC emacs-lisp
(general-define-key
  :states '(normal emacs)
  :prefix "SPC"
  "oa" 'org-agenda
  "oc" 'org-capture
  "ol" 'org-store-link
  "ob" 'm/org-agenda-switchb
  "or" 'helm-org-rifle-agenda-files)
#+END_SRC

** Agenda

I don't know what half of the agenda keybinds do, and they force my
hands away from the home row. Time to set up my own agenda movement keys.
In order to remove the default bindings, we delete the standard
org-agenda keybinds.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'org-agenda
  '(progn
    (setq org-agenda-mode-map (make-sparse-keymap))

    (general-define-key
      :prefix "\\"
      :states 'emacs
      :keymaps 'org-agenda-mode-map

      "s" 'org-agenda-schedule
      "d" 'org-agenda-deadline

      "t" 'org-agenda-set-tags

      "e" 'org-agenda-write)

    (general-define-key
      :states  'emacs
      :keymaps 'org-agenda-mode-map
    
      ; Motion
      ; ------
    
      "j" 'org-agenda-next-line
      "k" 'org-agenda-previous-line
    
       ; Files
      ; -----
    
      "\t" 'org-agenda-switch-to
      "<RET>" 'org-agenda-goto
      "F" 'org-agenda-follow-mode
    
      ; Display
      ; -------
    
      "a" 'org-agenda
      "A" 'org-agenda-append-agenda
    
      "d" 'org-agenda-day-view
      "w" 'org-agenda-week-view
      "v" 'org-agenda-view-mode-dispatch
    
      "f" 'org-agenda-later
      "b" 'org-agenda-earlier
    
      "." 'org-agenda-goto-today
       "g" 'org-agenda-goto-date
    
      "l" 'org-agenda-log-mode
      "r" 'org-agenda-redo
    
      "/" 'org-agenda-filter-by-tag
    
      ; Remote Editing
      ; --------------
    
      "u" 'org-agenda-undo
      "t" 'org-agenda-todo
    
      "+" 'org-agenda-priority-up
      "-" 'org-agenda-priority-down
    
      "<up>" 'org-agenda-do-date-earlier
      "<down>" 'org-agenda-do-date-later
    
      "c" 'org-agenda-capture
    
      ; Other
      ; -----
    
      "s" 'org-save-all-org-buffers
      "q" 'org-agenda-quit
      "x" 'org-agenda-exit
    )))
#+END_SRC

* Visuals

Let's use pretty bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :after org
  :init
  (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

Hide emphasis markers.

#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

I don't like the ellipsis org mode uses by default.

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " â¤µ")
#+END_SRC

Indent text with headline text. Use word wrap when lines become too long.

#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC

Use more sane settings in =BEGIN_SRC= blocks.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-edit-src-content-indentation 0)
#+END_SRC

Scale up inline latex.

#+BEGIN_SRC emacs-lisp
(plist-put org-format-latex-options :scale 1.5)
#+END_SRC

* Workflow
** =Todo= States

The possible todo states are /TODO/, +IN PROGRESS+ ACTIVE, /WAITING/ and /DONE/.
Timestamps are added when entering or leaving the /ACTIVE/ and /WAITING/
states. /DONE/ and /CANCELLED/ are the final states. Timestamps are recorded
when entering these states. Additionally, a note is requested for entering the
/WAITING/ and /CANCELLED/ state.

We add color and hotkeys to make it easy to recognize or enter these states.

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
  '((sequence
      "TODO(t)"
      "ACTIVE(a!/!)"
      "WAITING(w@/!)"
      "|"
      "DONE(d!)"
      "CANCELLED(c@)")))
(setq org-todo-keyword-faces
  '(("TODO" . org-todo)
    ("ACTIVE" . "cyan")
    ("WAITING" . "yellow")
    ("DONE" . org-done)
    ("CANCELLED" . "red")))
#+END_SRC

Log deadline and scheduled changes.

#+BEGIN_SRC emacs-lisp
(setq org-log-redeadline (quote time))
(setq org-log-reschedule (quote time))
#+END_SRC

We add any recorded timestamps to the /logbook/ drawer.

#+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer "LOGBOOK")
#+END_SRC

Don't allow marking an entry as complete if it has uncompleted children.

#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)
#+END_SRC

** Tags

We use the following (mutually exclusive) tags:

| Tag        | Meaning                                    |
|------------+--------------------------------------------|
| :work:     | Work related things, should be the default |
| :personal: | Personal things, bills, ...                |
| :meta:     | Org-mode related things                    |
|------------+--------------------------------------------|

#+BEGIN_SRC emacs-lisp
(setq org-tag-alist
  '((:startgroup . nil)
    ("work" . ?w)
    ("personal" . ?p)
    ("meta" . ?m)
    (:endgroup . nil)))
(setq org-tag-faces
  '(("work" . "red")
    ("personal" . "yellow")
    ("meta" . "cyan")))
#+END_SRC

** Capture 
:PROPERTIES:
:ID:       0fmdfwa0cpi0
:END:

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
  `(
    ("t" "Create a task" entry
      (file ,m-org-capture-todo)
      "* TODO %?")
    ("n" "Make a note" entry
      (file ,m-org-capture-notes)
      "* %U %?")
    ("m" "Start a meeting note" entry
      (file ,m-org-capture-meetings)
      "* %^t %^{Meeting Name}\n%?")
    ("j" "Add a journal entry" entry
     (file+olp+datetree ,m-org-capture-journal)
     "** Planning\n** :work:\n%?\n** :personal:\n** :meta:\n")))
#+END_SRC

Automatically enter insert mode when entering a capture buffer.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC

** Agenda

We don't show deadline warnings for scheduled tasks, or for tasks that
have already been completed.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-deadline-prewarning-if-scheduled t)
(setq org-agenda-skip-deadline-if-done t)
#+END_SRC

Show state changes in agenda.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-log-mode-items '(closed state))
#+END_SRC

Start in day view, don't show time grid, but do show the log.
If there is a way to tweak follow mode to only open one buffer, we
should enable it by default.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-span 'day)
(setq org-agenda-time-grid nil)
(setq org-agenda-start-with-log-mode t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
  '(("n" "Agenda and all TODOs"
     ((agenda "") (alltodo "")))
    ("u" "Unscheduled Tasks"
     ((todo ""
       ((org-agenda-overriding-header "Unscheduled Tasks")
        (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))))))
    ("d" "Completed Tasks"
     ((agenda ""
       ((org-agenda-overriding-header "Completed Tasks")
        (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'todo))))))))
#+END_SRC

** Refile

Don't only allow refiling in the current file, allow refiling in every
non-archive file in our org dir.

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
#+END_SRC

I want to be able to use an arbitrary file as a target (i.e. I want to
insert a subtree on the top level of a file).

#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path 'file)
#+END_SRC

We need this to make sure that we can use helm for a narrowing search.
[[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][Source + Explanation]]

#+BEGIN_SRC emacs-lisp
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

Finally, we want to be able to create new headings on the fly.

#+BEGIN_SRC emacs-lisp
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

* Export
Use [[https://github.com/fniessen/org-html-themes/][ReadTheOrg]] for export.

#+BEGIN_SRC emacs-lisp
(setq org-html-head-include-default-style nil)
(setq org-html-head "
<link rel=\"stylesheet\" type=\"text/css\" href=\"https://fniessen.github.io/org-html-themes/styles/readtheorg/css/htmlize.css\"/>
<link rel=\"stylesheet\" type=\"text/css\" href=\"https://fniessen.github.io/org-html-themes/styles/readtheorg/css/readtheorg.css\"/>

<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>
<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js\"></script>
<script type=\"text/javascript\" src=\"https://fniessen.github.io/org-html-themes/styles/lib/js/jquery.stickytableheaders.min.js\"></script>
<script type=\"text/javascript\" src=\"https://fniessen.github.io/org-html-themes/styles/readtheorg/js/readtheorg.js\"></script>
")
#+END_SRC

** TODO Look into using an offline version

