#+TITLE: Emacs Configuration
#+AUTHOR: Mathijs Saey
#+FILETAGS: :config:
#+PROPERTY: header-args :tangle (expand-file-name "init.el" user-emacs-directory)

This file contains my emacs configuration. Running ~org-babel-tangle~
will write the required files to [[file:~/.emacs.d/init.el]].

#+BEGIN_SRC emacs-lisp
;;; This file is auto-generated based on configuration.org.
;;; Any change made to this file will automatically be overwritten.

#+END_SRC

* Package setup
We use [[https://github.com/raxod502/straight.el][straight.el]] and [[https://github.com/jwiegley/use-package][use-package]] to manage our packages.

Since straight.el is not included with emacs we should [[https://github.com/raxod502/straight.el#getting-started][install it if
required]].

#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

Set up use-package to use straight.el.

#+BEGIN_SRC emacs-lisp
(setq straight-use-package-by-default t)
(straight-use-package 'use-package)
(require 'use-package)
#+END_SRC

* Visuals
** Theme & Font
Set up the theme & Font; always highlight the current line.

#+BEGIN_SRC emacs-lisp
(use-package darkokai-theme
  :init (setq darkokai-mode-line-padding 1)
  :config (load-theme 'darkokai t))
(set-face-attribute 'default t :font "Menlo")
(set-face-attribute 'default t :height (* 10 12))
(global-hl-line-mode t)
#+END_SRC

** Parentheses
When programming, show line numbers and highlight matching
parentheses.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'prog-mode-hook 'show-paren-mode)
#+END_SRC

Use rainbow brackets when dealing with lisp like languages.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :config (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** GUI
I don't need to see the scroll, menu, or tool bar.
On OSX the menu bar is visible anyway, so let's not disable it.

#+BEGIN_SRC emacs-lisp
(unless (string-equal system-type "darwin") (menu-bar-mode -1))
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

** Modeline
Use [[https://github.com/dbordak/telephone-line][telephone-line]] as a modeline. Add a segment which displays the
buffer path relative to the home dir. Modify this later to be relative
to "project" root directory.

#+BEGIN_SRC emacs-lisp
(use-package telephone-line
  :init
  (telephone-line-defsegment path-segment ()
    (if buffer-file-name
	(file-relative-name buffer-file-name "~")
      mode-line-buffer-identification))
    (setq telephone-line-lhs
	  '((evil .   (telephone-line-evil-tag-segment))
	    (accent . (path-segment)))
	  telephone-line-rhs
	  '((nil    . (telephone-line-major-mode-segment))
	    (accent . ((lambda () (telephone-line-atom-encoding-segment t))))
	    (evil   . (telephone-line-airline-position-segment))))
    (setq telephone-line-height 24
	  telephone-line-primary-left-separator 'telephone-line-cubed-left
	  telephone-line-primary-right-separator 'telephone-line-cubed-right
	  telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
	  telephone-line-secondary-right-separator'telephone-line-cubed-hollow-right)
    :config
    (telephone-line-mode t))
#+END_SRC

* Tweaks
** Temporary files
Keep temporary files out of the way inside the =~/.tmp/emacs/=
folder.

#+BEGIN_SRC emacs-lisp
(defconst temp-dir (expand-file-name "~/.tmp/emacs"))
(setq backup-directory-alist
      `((".*" . ,(expand-file-name "backup/" temp-dir)))
      auto-save-list-file-prefix
      (expand-file-name "autosave/" temp-dir))
#+END_SRC

** Customize
~tangle~ will overwrite =init.el= and I prefer to keep my configuration in
a single file anyway. Store customize.el settings as a temporary
file. Load it in case I want to experiment with it anyway.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "customize.el" temp-dir))
(load custom-file 1)
#+END_SRC

** Completion
Use [[https://github.com/emacs-helm/helm][helm]] for completion everywhere.

#+BEGIN_SRC emacs-lisp
(use-package helm
  :config
  (helm-autoresize-mode t))
#+END_SRC

*** TODO Make esc work in helm buffers
** $PATH on OSX
GUI applications don't inherit environment variables in OSX. Use a
package to ensure the $PATH gets set correctly.

#+BEGIN_SRC emacs-lisp
(when (string-equal system-type "darwin")
  (use-package exec-path-from-shell
    :config
      (exec-path-from-shell-initialize)))
#+END_SRC

* Editing Behaviour
** Persistent Undo
Persist undo history in the tmp files

#+BEGIN_SRC emacs-lisp
(setq undo-tree-auto-save-history t
      undo-tree-history-directory-alist
      `(("." . ,(expand-file-name "undo/" temp-dir))))
#+END_SRC
** TODO Search options
** TODO Spell check
** TODO Linting & autocompletion
* Keybinds
** General set up
We use [[https://github.com/noctuid/general.el#about][general.el]] to create keybinds.

#+BEGIN_SRC emacs-lisp
(use-package general)
(require 'general)
#+END_SRC

I like the idea of a leader and localleader that vim offers, set up
=space= and =\= for this purpose.

#+BEGIN_SRC emacs-lisp
(setq leader "SPC")
(setq localleader "\\")
(general-create-definer leader-map :prefix leader :states 'normal)
(general-create-definer local-map  :prefix localleader :states 'normal)
#+END_SRC

** Keybind Hints
Use [[https://github.com/justbur/emacs-which-key][which-key]] to make it easier to remember those keybinds that are
not used that often.

#+BEGIN_SRC emacs-lisp
(use-package which-key :config (which-key-mode))
#+END_SRC
** Evil mode
I don't like emacs-style keybinds, let's use [[https://github.com/emacs-evil/evil][evil]] to get the best of
vim in emacs.

#+BEGIN_SRC emacs-lisp
(use-package evil :config (evil-mode t))
#+END_SRC

Use =fj= or =jf= to exit insert mode.

#+BEGIN_SRC emacs-lisp
(use-package evil-escape
  :init
  (setq evil-escape-key-sequence "fj")
  (setq evil-escape-unordered-key-sequence t)
  :config (evil-escape-mode))
#+END_SRC

** Window bindings
Add window bindings under the leader key:

- =b= to change buffers

#+BEGIN_SRC emacs-lisp
(leader-map "b" 'helm-buffers-list)
#+END_SRC

*** TODO close buffer

*** Movement and creation
To easily switch between open windows, we use the home-row movement
keys (hjkl) to move in a given direction, or to create a window in the
given direction if it does not exist. For discoverability, we give
each of the directions a unique function name.

#+BEGIN_SRC emacs-lisp
(require 'windmove)

(defun move-window-or-create (direction)
  (if (window-in-direction direction)
      (cond
        ((eq direction 'above) (windmove-up))
        ((eq direction 'below) (windmove-down))
        ((eq direction 'left) (windmove-left))
        ((eq direction 'right) (windmove-right)))
      (cond
        ((eq direction 'above) (split-window-vertically) (windmove-up))
        ((eq direction 'below) (split-window-vertically) (windmove-down))
        ((eq direction 'left) (split-window-horizontally) (windmove-left))
        ((eq direction 'right) (split-window-horizontally) (windmove-right)))))

(defun move-or-create-up    () (interactive) (move-window-or-create 'above))
(defun move-or-create-down  () (interactive) (move-window-or-create 'below))
(defun move-or-create-left  () (interactive) (move-window-or-create 'left))
(defun move-or-create-right () (interactive) (move-window-or-create 'right))
#+END_SRC

We map these functions to the =<leader>m= prefix (mnemonic: (m)ove).

#+BEGIN_SRC emacs-lisp
(leader-map
 "mh" 'move-or-create-left
 "mj" 'move-or-create-down
 "mk" 'move-or-create-up
 "ml" 'move-or-create-right
 "mx" 'delete-window)
#+END_SRC
** Other
Add some other useful leader bindings:
- ~w~ to write the current buffer

#+BEGIN_SRC emacs-lisp
(leader-map "w" 'save-buffer)
#+END_SRC

** Mac Keybinds
The mac port of emacs maps command to meta by default. Change this and
use the option key instead.

#+BEGIN_SRC emacs-lisp
(when (string-equal system-type "darwin")
  (setq mac-command-modifier 'super
	mac-option-modifier 'meta))
#+END_SRC

Add some keybinds which are common to most OSX Applications:

#+BEGIN_SRC emacs-lisp
(when (string-equal system-type "darwin")
    (general-define-key
    "s-=" 'text-scale-increase
    "s--" 'text-scale-decrease))
#+END_SRC
*** TODO cmd + v in insert mode, cmd + q to quit
* Language specific configuration
Store language specific configuration in a seperate directory. Only
load the configuration when required.

#+BEGIN_SRC emacs-lisp
  (defconst lang-dir (expand-file-name "~/.emacs.d/lang/"))
  (defun lang (name)
    (org-babel-load-file (expand-file-name (concat name ".org") lang-dir)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(lang "org")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package elixir-mode)
#+END_SRC
