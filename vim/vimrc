" Vimrc
" This config is symlinked to both ~/.vim/vimrc and ~/.config/nvim/init.vim
" and thus shared between vim and neovim.

" ------- "
" Plugins "
" ------- "

const config_dir = has('nvim') ? stdpath('config') : '~/.vim'
const plug_dir = has('nvim') ? stdpath('data').'/plugs' : '~/.vim/plugs'

" Bootstrap plug.vim
" ------------------

" Install plug and all the listed plugins if plug was not previously installed.
if empty(glob(config_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.config_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugin list
" -----------
call plug#begin(plug_dir)

" fzf for fuzzy selections
Plug 'junegunn/fzf.vim'                                " vim integration
Plug 'junegunn/fzf', {'do': { -> fzf#install() }}      " Install as a plugin for portability

" Session management
Plug 'xolox/vim-misc'                                  " General scripts, required for vim-session and vim-reload
Plug 'xolox/vim-session'                               " Session Management

" IDE-like features
Plug 'w0rp/ale'                                        " Asynchronous linter
Plug 'natebosch/vim-lsc'                               " Lightweight language server support
Plug 'vim-test/vim-test'                               " Easily run tests
Plug 'mhinz/vim-signify'                               " VCS status in sign column
Plug 'tpope/vim-projectionist'                         " Tools for working with relations between files
Plug 'ludovicchabant/vim-gutentags'                    " Automatic ctag generation
Plug 'https://git.sr.ht/~ackyshake/VimCompletesMe.vim' " Completion based on omnifunc

" Editor tweaks
Plug 'romainl/vim-cool'                                " Disable highlight after search
Plug 'tpope/vim-repeat'                                " Allow more actions to be repeated with .
Plug 'tpope/vim-endwise'                               " Automatically insert matching end keyword
Plug 'machakann/vim-swap'                              " Easily swap function arguments
Plug 'pbrisbin/vim-mkdir'                              " Automatically create directories
Plug 'tpope/vim-surround'                              " Easily work with surrounding characters
Plug 'tpope/vim-commentary'                            " Easily turn lines into comments
Plug 'rbgrouleff/bclose.vim'                           " Close buffer without changing layout
Plug 'vim-scripts/DeleteTrailingWhitespace'            " Allow the automatic deletion of trailing whitespace

" Visual tweaks
Plug 'mbbill/undotree'                                 " Visual undo tree
Plug 'scrooloose/nerdtree'                             " File browser
Plug 'luochen1990/rainbow'                             " Colour parentheses
Plug 'junegunn/vim-peekaboo'                           " Preview register contents
Plug 'RRethy/vim-illuminate'                           " Highlight word under cursor
Plug 'itchyny/lightline.vim'                           " Status bar
Plug 'liuchengxu/vim-which-key'                        " Key discovery aid
Plug 'tomasr/molokai'                                  " Color scheme

" Language Support
Plug 'lervag/vimtex'                                   " Latex support
Plug 'cespare/vim-toml'                                " Toml support
Plug 'rust-lang/rust.vim'                              " Rust support
Plug 'wlangstroth/vim-racket'                          " Racket support
Plug 'gabrielelana/vim-markdown'                       " Improved markdown support
Plug 'JuliaEditorSupport/julia-vim'                    " Julia support
" Elixir
Plug 'elixir-lang/vim-elixir'                          " Basic support for Elixir
Plug 'dkuku/vim-projectionist-elixir'                  " Projectionist templates for elixir / phoenix
" Python
Plug 'hdima/python-syntax'                             " Better syntax highlighting for python
Plug 'vim-scripts/indentpython.vim'                    " Better python indentation
" Org mode
Plug 'jceb/vim-orgmode'                                     " Basic org mode support
Plug 'tpope/vim-speeddating'                                " Required for vim org-mode

" Language Servers
" ----------------
" We install language servers as plugs to make it easier to manage them.

function! BuildElixirLs(info)
  if a:info.status == 'installed' || a:info.status == 'updated' || a:info.force
    !MIX_ENV=PROD mix deps.get
    !MIX_ENV=PROD mix elixir_ls.release2
  endif
endfunction

Plug 'elixir-lsp/elixir-ls', {'tag': '*', 'do': function('BuildElixirLs')}

" Platform-specific
" -----------------

if has('linux')
  Plug 'jasonccox/vim-wayland-clipboard'
endif

call plug#end()

" ------- "
" Visuals "
" ------- "

" Theme
colorscheme molokai

" Syntax highlighting tweaks
set showmatch                                       " Highlight matching [{()}]
set conceallevel=2                                  " Hide concealled text, show replacement text

" Rainbow Parentheses
let g:rainbow_active = 0                            " Enable the rainbow toggle command, but don't activate
let g:rainbow_conf = {}
let g:rainbow_conf.separately = {'*':{}}

" Line numbers
set number                                          " Draw line numbers
set cursorline                                      " Highlight current line
set colorcolumn=80                                  " Show a line on column 80

" Cursor area
set scrolloff=1                                     " Always show the line above the cursor
set sidescrolloff=5

" Wrapping behaviour
set nowrap                                          " Don't auto-insert newlines when exceeding 80 characters
set wrapmargin=0                                    " Don't wrap based on screen edge
let &showbreak="\u21aa "                            " Symbol to show when soft wrapping

" hidden charachters
set list                                            " Visualize tabs, trailing spaces and various elements
set listchars=tab:--                                " - to mark tabs
set listchars+=trail:~                              " ~ to mark trailing spaces
set listchars+=extends:>                            " > to mark that a line continues beyond the edge of the screen
set listchars+=precedes:<                           " < to mark that a line starts beyond the left edge of the screen
set listchars+=conceal:*                            " * to mark hidden characters
set listchars+=nbsp:.                               " . to mark non-breakable spaces

set ruler                                           " Show line and column number
set sidescroll=1                                    " Scroll per charachter when sidescrolling
set laststatus=2                                    " Always show the status bar

" Status Line
" -----------

" Don't show --insert-- and the like, it will be shown in the status line
set noshowmode

let g:lightline = {'colorscheme': 'powerline'}

" Components to show on the currently active window
let g:lightline.active = {
\ 'left': [['mode', 'paste', 'spell'],
\          ['relativepath', 'readonly', 'modified']],
\ 'right': [['lineinfo'],
\            ['percent']]}

" Components to show on inactive windows
let g:lightline.inactive = {
  \ 'left': [['relativepath', 'readonly', 'modified']],
  \ 'right': []}

" Don't show RO for readonly, use a custom function instead
let g:lightline.component_function = {
  \   'readonly': 'LightlineReadonly',
  \ }

" Prettier indicator for readonly buffers
function! LightlineReadonly()
  return &readonly ? '*read-only*' : ''
endfunction

" ----------------- "
" Editing Behaviour "
" ----------------- "

" Tabs & Spacing
set tabstop=2                                       " Draw tabs as 2 spaces
set shiftwidth=2                                    " Use 2 spaces as automatic indentation
set softtabstop=2                                   " Insert and remove tabs as 2 spaces
set expandtab                                       " Expand tabs to spaces

" Search Behaviour
set gdefault                                        " Always use global substitute
set ignorecase                                      " Don't match case
set smartcase                                       " Unless the search term contains uppercase
let g:CoolTotalMatches = 1                          " Show total matches

" Global search
let $FZF_DEFAULT_COMMAND = 'rg --files --no-ignore-vcs' " Use ripgrep as the default fzf file provider

" Folding
set foldlevel=99
set foldopen=hor,insert,mark,percent,quickfix,search,tag,undo " Don't open folds when moving vertically

" Indentation
set autoindent                                      " Automatically copy amount of leading tabs from previous lines
set backspace=indent,eol,start                      " Allow backspaces to remove more
set formatoptions+=j                                " Intelligently handle comments when joining lines

" Search
set hlsearch                                        " Highlight matches
set incsearch                                       " Highlight characters as they are matched

" Buffers
set hidden                                          " Allow buffers with unsaved changes to become hidden
set autoread                                        " Reload externally modified files if they have not been modified inside vim

" Completion
set wildmenu                                        " Shows the available autocompletes in command menu

" ---------------------- "
" Miscellaneous Settings "
" ---------------------- "

set undofile                                        " Save undo history
set mouse=a                                         " Allow mouse support

let g:DeleteTrailingWhitespace = 1                  " Always check for trailing whitespace
let g:DeleteTrailingWhitespace_Action = 'delete'    " Remove trailing whitespace on save
let g:signify_realtime = 1                          " Update git markers more frequently
let g:peekaboo_delay = 100                          " Don't show the register preview if I already know what to do
let g:no_plugin_maps = 1                            " Don't let Bclose bind <Leader>bd

let g:session_autosave = 'yes'                      " Always save sessions when quitting vim
let g:session_autoload = 'no'                       " Don't prompt for opening old sessions, overridden for nvim below
let g:session_autosave_periodic = 1                 " Save session every minute
let g:session_autosave_silent = 1                   " Be quiet when autosaving

" Paths
let g:session_directory = '~/.vim/sessions/'
let g:gutentags_cache_dir = '~/.vim/tags/'

set backupdir=~/.vim/backup//                       " Directory for file backups
set directory=~/.vim/swap//                         " Directory for swap files
set undodir=~/.vim/undo//                           " Directory for undo files
set viewdir=~/.vim/view//                           " Directory for view files

" ---------------- "
" "Smart" Features "
" ---------------- "

let test#strategy = "vimterminal"

set completeopt=menu,menuone,noselect
set completepopup=highlight:PmenuSbar,border:off,align:menu

if has('popupwin')
  set completeopt+=popup
endif

let g:lsc_server_commands = {
  \  'elixir': {
  \    'command': expand('~/.vim/plugs/elixir-ls/release/language_server.sh'),
  \    'log_level': 'Error'
  \  },
  \  'rust': expand('~/.cargo/bin/rls'),
  \}

let g:lsc_auto_map = {
  \ 'defaults': v:true,
  \ 'Completion': 'omnifunc',
  \}

" ------------ "
" Autocommands "
" ------------ "

augroup window_hooks
 " Ensure these commands are only loaded once
  autocmd!
  " Rearrange splits when vim is resized
  autocmd VimResized * wincmd =
  " Check for file changes when moving between buffers
  autocmd BufEnter * :checktime
augroup END

" --------------------------- "
" Custom Functions & Commands "
" --------------------------- "

" Move to a split or create one if there is no split in the desired location.
" Args: key
"   key: the hjkl that was pressed.
function! MoveOrCreateWindow(key) abort
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction

" See if there is a tmuxinator project with the name of the current session.
" Return the name of the project if it exists; otherwise, return the empty
" string.
function! GetTmuxinatorProject() abort
  let sname = fnamemodify(v:this_session, ":t:r")
  if filereadable(expand("~/.config/tmuxinator/" . sname . ".yml"))
    return sname
  else
    return ""
  endif
endfunction

" Open a terminal, if a tmuxinator project exists with the name of the current
" session, open that instead.
function! OpenTerminalOrTmuxinatorProject() abort
  let name = GetTmuxinatorProject()
  if name != ""
    exec 'terminal ++close tmuxinator start ' . name
  else
    exec 'terminal ++close'
  endif
endfunction

" Close the current tmuxinator project.
" Should only be executed inside a terminal window with a running tmux.
" The tmux session should have a shell running at the window with index 0.
" If we're not in a tmuxinator project, send "exit" to the terminal instead.
function! CloseTmuxinatorProject() abort
  let name = GetTmuxinatorProject()
  if name != ""
    call term_sendkeys('', "\<c-b>0")
    sleep 100m
    call term_sendkeys('', "tmuxinator stop " . name . "\<CR>")
  else
    call term_sendkeys('', "exit\<CR>")
  endif
endfunction

" Find out if we are in a git repo
" Based on https://github.com/junegunn/fzf.vim/blob/master/autoload/fzf/vim.vim#L500
function! IsGitRepo() abort
  let root = split(system('git rev-parse --show-toplevel'), '\n')[0]
  return v:shell_error ? 0 : 1
endfunction

" Execute the fzf.vim "GFiles" command, or the "Files" command, if we're not
" in a git repo.
function! FilesOrGFiles() abort
  if IsGitRepo()
    exec 'GFiles'
  else
    exec 'Files'
  endif
endfunction

" ------------------- "
" Custom Key Bindings "
" ------------------- "

" Use space as leader
let mapleader = "\<Space>"
" Use backslash as local leader
let maplocalleader = "\\"

" WhichKey
" --------

" Use which key for discoverability

nnoremap <silent> <Leader> :<c-u>WhichKey '<Space>'<CR>
vnoremap <silent> <Leader> :<c-u>WhichKeyVisual '<Space>'<CR>
nnoremap <silent> <LocalLeader> :<c-u>WhichKey '\'<CR>
vnoremap <silent> <LocalLeader> :<c-u>WhichKeyVisual '\'<CR>

" Set up dictionaries to give better names to mappings
let g:wk_leader_map =  {}
let g:wk_local_map =  {}

call which_key#register('<Space>', "g:wk_leader_map")
call which_key#register('\', "g:wk_local_map")

" Command Shortcuts
" -----------------
"
"  Prefixes:
"   - <Leader>m for window operations (mnemonic: m for "move")
"   - <Leader>z for spelling operations (mnemonic: z is spell "fix" key)

" Update file
nnoremap <Leader>w :update<CR>

let g:wk_leader_map.v = {
      \ 'name' : 'view',
      \ 'u' : 'undo tree',
      \ 'l' : 'line numbers (relative/normal)',
      \ 'n' : 'line numbers (visible/invisible)',
      \ 'r' : 'rainbow parentheses',
      \ 'k' : 'NerdTree',
      \ 'z' : 'fold column',
      \ 's' : 'vcs status',
\}

nnoremap <Leader>a :A<CR>
nnoremap <Leader>vu :UndotreeToggle<CR>
nnoremap <Leader>vl :set relativenumber!<CR>
nnoremap <Leader>vn :set number!<CR>
nnoremap <Leader>vr :RainbowToggle<CR>
nnoremap <Leader>vk :NERDTreeToggle<CR>
nnoremap <Leader>vs :SignifyToggle<CR>

" Terminal
" --------

" Only enable this if our vim has terminal support
if has('terminal')
  let g:wk_leader_map.s = 'Tmuxinator terminal'
  let g:wk_leader_map.S = 'Terminal'

  " Open a terminal or tmuxinator project if it's available
  nnoremap <Leader>s :call OpenTerminalOrTmuxinatorProject()<CR>
  " Open a standard terminal
  nnoremap <Leader>S :terminal<CR>

  " Detach from tmux
  tnoremap §d <C-b>d
  " Stop the current tmux session
  tnoremap §D <C-W>: call CloseTmuxinatorProject()<CR>

  " Enter terminal normal mode
  tnoremap §n <C-W>N
  " Paste from the system clipboard
  tmap §p <C-W>"+
endif

" Spellcheck
" ----------

let g:wk_leader_map.z = {
      \ 'name' : 'spell',
      \ 'o' : 'toggle',
      \ 'n' : 'Nederlands',
      \ 'e' : {
      \   'name' : 'English', 'b' : 'British English', 'a': 'American English'
      \}
\}

nnoremap <Leader>zo  :set spell!<CR>
nnoremap <Leader>zn  :setlocal spelllang=nl<CR>
nnoremap <Leader>zeb :setlocal spelllang=en_gb<CR>
nnoremap <Leader>zea :setlocal spelllang=en_us<CR>

" Fuzzy finding
" -------------

let g:wk_leader_map.b = 'Find buffer'
let g:wk_leader_map.f = 'Find git files'
let g:wk_leader_map.f = 'Find all files'
let g:wk_leader_map.B = 'Find Session (nvim)'

" Find a buffer
nnoremap <Leader>b :Buffers<CR>
" Find a file from git or from all files
nnoremap <Leader>f :call FilesOrGFiles()<CR>
nnoremap <Leader>F :Files<CR>

" Fuzzy find a session to open
nnoremap <Leader>B :call fzf#run({'source': xolox#session#get_names(0), 'sink': 'OpenSession'})<CR>

" Window Operations
" -----------------

let g:wk_leader_map.m = {
      \ 'name' : 'move windows',
      \ 'x' : 'close current',
      \ 'h' : 'move/create left',
      \ 'j' : 'move/create down',
      \ 'k' : 'move/create up',
      \ 'l' : 'move/create right',
\}

" Close the current split
nnoremap <silent> <Leader>mx :quit<CR>

" Move to a split or create one
nnoremap <silent> <Leader>mh :call MoveOrCreateWindow('h')<CR>
nnoremap <silent> <Leader>mj :call MoveOrCreateWindow('j')<CR>
nnoremap <silent> <Leader>mk :call MoveOrCreateWindow('k')<CR>
nnoremap <silent> <Leader>ml :call MoveOrCreateWindow('l')<CR>

" Testing
" -------

let g:wk_leader_map.t = {
      \ 'name' : 'test',
      \ 't' : 'test project',
      \ 'n' : 'test nearest',
      \ 'f' : 'test file',
      \ 'l' : 'test last',
      \ 'v' : 'visit file from which last test command was ran',
\}

nnoremap <silent> <Leader>tt :TestSuite<CR>
nnoremap <silent> <Leader>tn :TestNearest<CR>
nnoremap <silent> <Leader>tf :TestFile<CR>
nnoremap <silent> <Leader>tl :TestLast<CR>
nnoremap <silent> <Leader>tv :TestVisit<CR>

" Editing
" -------

" Easily get out of insert mode
inoremap fj <Esc>
inoremap jf <Esc>

" Copy to system clipboard
nmap <Leader>y "+y
nmap <Leader>d "+d
vmap <Leader>y "+y
vmap <Leader>d "+d

" Copy from system clipboard, using paste mode
nmap <Leader>p :set paste<CR>"+p:set nopaste<CR>
nmap <Leader>P :set paste<CR>"+P:set nopaste<CR>
vmap <Leader>p :set paste<CR>"+p:set nopaste<CR>
vmap <Leader>P :set paste<CR>"+P:set nopaste<CR>

" Split line (inverse of J)
nnoremap <Leader>j i<CR><Esc>k$
