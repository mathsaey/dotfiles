" Vimrc
" Mathijs Saey

" ------- "
" Plugins "
" ------- "

call plug#begin('~/.vim/bundle')                                               " Start plugin list

" Plugin list
" -----------

" Visuals
Plug 'tomasr/molokai'                                                          " Color scheme
Plug 'junegunn/goyo.vim'                                                       " Distraction free mode
Plug 'luochen1990/rainbow'                                                     " Colour parentheses
Plug 'itchyny/lightline.vim'                                                   " Status bar
Plug 'junegunn/limelight.vim'                                                  " Only color current paragraph

" Fzf
Plug 'junegunn/fzf'                                                            " Install fzf as a plugin for portability
Plug 'junegunn/fzf.vim'                                                        " Out of the box vim integration

" Tools
Plug 'w0rp/ale'                                                                " Asynchronous linter
Plug 'xolox/vim-misc'                                                          " General scripts, required for vim-session and vim-reload
Plug 'mileszs/ack.vim'                                                         " Better file search
Plug 'tpope/vim-repeat'                                                        " Allow more actions to be repeated with .
Plug 'godlygeek/tabular'                                                       " Easily align things
Plug 'xolox/vim-session'                                                       " Session Management
Plug 'mhinz/vim-signify'                                                       " VCS status in sign column
Plug 'tpope/vim-endwise'                                                       " Automatically insert matching end keyword
Plug 'machakann/vim-swap'                                                      " Easily swap function arguments
Plug 'pbrisbin/vim-mkdir'                                                      " Automatically create directories
Plug 'markonm/traces.vim'                                                      " Substitute preview
Plug 'tpope/vim-surround'                                                      " Easily work with surrounding charachters
Plug 'scrooloose/nerdtree'                                                     " Better file browser
Plug 'tpope/vim-commentary'                                                    " Easily turn lines into comments
Plug 'RRethy/vim-illuminate'                                                   " Highlight word under cursor
Plug 'rbgrouleff/bclose.vim'                                                   " Close buffer without changing layout
Plug 'simnalamburt/vim-mundo'                                                  " Visual undo tree
Plug 'vim-scripts/TaskList.vim'                                                " Todo list summary
Plug 'ludovicchabant/vim-gutentags'                                            " Automatic ctag generation
Plug 'editorconfig/editorconfig-vim'                                           " Respect .editorconfig files
Plug 'vim-scripts/DeleteTrailingWhitespace'                                    " Allow the automatic deletion of trailing whitespace

" Text Objects
Plug 'kana/vim-textobj-line'                                                   " Line text object
Plug 'kana/vim-textobj-user'                                                   " Required for elixir text objects
Plug 'vim-scripts/argtextobj.vim'                                              " Text objects that deal with function arguments
Plug 'michaeljsmith/vim-indent-object'                                         " Text object for indented content

" Languages
Plug 'tpope/vim-scriptease'                                                    " Vimscript goodies
Plug 'zah/nim.vim'                                                             " Nim support
Plug 'lervag/vimtex'                                                           " Latex support
Plug 'dleonard0/pony-vim-syntax'                                               " Pony support
Plug 'rust-lang/rust.vim'                                                      " Rust support
Plug 'wlangstroth/vim-racket'                                                  " Racket support
Plug 'gabrielelana/vim-markdown'                                               " Improved markdown support
Plug 'mhinz/vim-mix-format'                                                    " Elixir formatter
Plug 'elixir-lang/vim-elixir'                                                  " Basic support for Elixir
Plug 'slashmili/alchemist.vim'                                                 " IDE like tools for Elixir
Plug 'andyl/vim-textobj-elixir'                                                " Extra text objects for elixir
Plug 'hdima/python-syntax'                                                     " Better syntax highlighting for python
Plug 'vim-scripts/indentpython.vim'                                            " Better python indentation
Plug 'mustache/vim-mustache-handlebars'                                        " handlebars support

" Org mode + dependencies
" Plug '~/Documents/Code/org.vim'

Plug 'jceb/vim-orgmode'                                                        " Org mode for vim
Plug 'vim-scripts/utl.vim'                                                     " Text linking
Plug 'tpope/vim-speeddating'                                                   " Date increment / decrement

" Plugins with advanced setup

" Function to install the YCM server after updates.
function! BuildYCM(info)
  if a:info.status == 'installed' ||
   \ a:info.status == 'updated'   ||
   \ a:info.force
    !./install.py --clang-completer
  endif
endfunction

Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }                  " Tab completion

call plug#end()                                                                " End of plugin list

" ---------------------- "
" Miscellaneous Settings "
" ---------------------- "

set undofile                                        " Save undo tree
set wildmenu                                        " Shows the available autocompletes in command menu
set backspace=indent,eol,start                      " Allow backspaces to remove more

" Join behaviour
set formatoptions+=j                                " Intelligently handle comments when joining lines

" Whitespace
let g:DeleteTrailingWhitespace_Action = 'delete'    " Remove trailing whitespace on save

" Session configuration
let g:session_autosave = 'yes'                      " Always save sessions when quitting vim
let g:session_autoload = 'no'                       " Don't prompt for opening old sessions
let g:session_autosave_periodic = 1                 " Save session every minute

" vim-signify configuration
let g:signify_realtime = 1                          " Update the git markers more frequently

" bclose configuration
let g:no_plugin_maps = 1                            " Don't let Bclose bind <Leader>bd

" Netrw
" -----

" Don't show the netrw banner
let g:netrw_banner = 0
" Use a tree like layout for netrw
let g:netrw_liststyle = 3
" Open a selected file in the previous window
let g:netrw_browse_split = 4
" Show the netrw preview in a vertical split
let g:netrw_preview=1
" Size of netrw window
let g:netrw_winsize = 25
" Don't store netrw history
let g:netrw_dirhistmax=0

" File Locations
" --------------

" Temporary Files
set backupdir=~/.tmp/vim/backup//                   " Directory for file backups
set directory=~/.tmp/vim/swap//                     " Directory for swap files
set undodir=~/.tmp/vim/undo//                       " Directory for undo files

let g:session_directory='~/.tmp/vim/sessions/'      " Directory for session files
let g:gutentags_cache_dir='~/.tmp/vim/tags/'        " Directory for ctags files

" ------- "
" Visuals "
" ------- "

" Theme and Font
colorscheme molokai                                 " Set color scheme

" Syntax highlighting tweaks
syntax enable                                       " Enable syntax highlighting
set showmatch                                       " Highlight matching [{()}]
set conceallevel=2                                  " Hide concealled text, show replacement text

" Rainbow Parentheses
let g:rainbow_active = 0                            " Enable the rainbow toggle command, but don't activate
let g:rainbow_conf = {}
let g:rainbow_conf.separately = {'*':{}}

" Line numbers
set ruler                                           " Show line and column number
set number                                          " Draw line numbers
set cursorline                                      " Highlight current line
set colorcolumn=80                                  " Show a line on column 80

" Cursor area
set scrolloff=1                                     " Always show the line above the cursor
set sidescrolloff=5

" Wrapping behaviour
set nowrap                                          " Don't auto-insert newlines when exceeding 80 characters
set sidescroll=1                                    " Scroll per charachter when sidescrolling
set wrapmargin=0                                    " Don't wrap based on screen edge

" hidden charachters
set list                                            " Visualize tabs, trailing spaces and various elements
set listchars=tab:--                                " - to mark tabs
set listchars+=trail:~                              " ~ to mark trailing spaces
set listchars+=extends:>                            " > to mark that a line continues beyond the edge of the screen
set listchars+=precedes:<                           " < to mark that a line starts beyond the left edge of the screen
set listchars+=conceal:*                            " * to mark hidden characters
set listchars+=nbsp:.                               " . to mark non-breakable spaces

" Status Line
" -----------

set laststatus=2                                    " Always show the status bar
set noshowmode                                      " Don't show --insert-- and the like, it will be shown in the status line

let g:lightline = {'colorscheme': 'powerline'}

" Components to show on the currently active window
let g:lightline.active = {
\ 'left': [['mode', 'paste', 'spell'],
\          ['relativepath', 'readonly', 'modified']],
\ 'right': [['lineinfo'],
\            ['percent']]}

" Components to show on inactive windows
let g:lightline.inactive = {
  \ 'left': [['relativepath', 'readonly', 'modified']],
  \ 'right': []}

" Don't show RO for readonly, use a custom function instead
let g:lightline.component_function = {
  \   'readonly': 'LightlineReadonly',
  \ }

" Prettier indicator for readonly buffers
function! LightlineReadonly()
  return &readonly ? '*read-only*' : ''
endfunction

" ----------------- "
" Editing Behaviour "
" ----------------- "

" Tabs & Spacing
set tabstop=2                                       " Draw tabs as 2 spaces
set shiftwidth=2                                    " Use 2 spaces as automatic indentation
set softtabstop=2                                   " Insert and remove tabs as 2 spaces
set expandtab                                       " Expand tabs to spaces

" Indentation
set autoindent                                      " Automatically copy amount of leading tabs from previous lines

" Search Behaviour
set incsearch                                       " Highlight characters as they are matched
set hlsearch                                        " Highlight matches
set gdefault                                        " Always use global substitute

" Search Case Behaviour
set ignorecase                                      " Don't match case
set smartcase                                       " Unless the search term contains uppercase

" Global search
let g:ackprg = 'rg --vimgrep'                           " Use ripgrep for ack.vim
let $FZF_DEFAULT_COMMAND = 'rg --files --no-ignore-vcs' " Use ripgrep as the default fzf file provider

" ------------ "
" Autocommands "
" ------------ "

augroup window_hooks
 " Ensure these commands are only loaded once
  autocmd!

  " Rearrange splits when vim is resized
  autocmd VimResized * wincmd =

  " Turn on Limelight when using Goyo
  autocmd User GoyoEnter Limelight
  autocmd User GoyoLeave Limelight!
  " Turn off ale when leaving goyo
  autocmd User GoyoEnter ALEDisable
  autocmd User GoyoLeave ALEEnable
augroup END

" --------------------------- "
" Custom Functions & Commands "
" --------------------------- "

" Creates a fancy comment box given a string
function! CommentBox(msg) abort
  let com = substitute(&commentstring, '%s', '', '')
  let com = substitute(l:com, ' ', '', '')
  let len = strlen(a:msg)

  let sur  = l:com . ' ' . repeat('-', l:len) . ' ' . l:com
  let mid  = l:com . ' ' . a:msg . ' ' . l:com

  call append('.', sur)
  call append('.', mid)
  call append('.', sur)
endfunction

" Creates a fancy comment line given a string
function! CommentLine(msg) abort
  let com = substitute(&commentstring, '%s', '', '')
  let com = substitute(l:com, ' ', '', '')
  let len = strlen(a:msg)

  let sur  = l:com . ' ' . repeat('-', l:len)
  let mid  = l:com . ' ' . a:msg

  call append('.', sur)
  call append('.', mid)
endfunction

" Get the currently selected text
" Source: http://stackoverflow.com/a/6271254/3329884
function! GetVisualSelection()
  let [lnum1, col1] = getpos("'<")[1:2]
  let [lnum2, col2] = getpos("'>")[1:2]
  let lines = getline(lnum1, lnum2)
  let lines[-1] = lines[-1][: col2 - (&selection == 'inclusive' ? 1 : 2)]
  let lines[0] = lines[0][col1 - 1:]
  return join(lines, "\n")
endfunction

" Highlight a piece of text and add it to the system clipboard
" Args: txt, [theme, fontSize, fileType, font]
"   txt: The text to be highlighted
"   theme: The highlight theme to use (defaults to seashell)
"   fontSize: The font size to use (defaults to 12)
"   fileType: The language of txt (defaults to the current filetype)
"   font: The font to use (defaults to menlo)
function! Highlight(txt, ...) range abort
  let txt      = shellescape(a:txt, 1)
  let theme    = (a:0 >= 1) ? a:1 : 'seashell'
  let fontSize = (a:0 >= 2) ? a:2 : 12
  let fileType = (a:0 >= 3) ? a:3 : &filetype
  let font     = (a:0 >= 4) ? a:4 : 'menlo'
  let cmd =
    \ '!' . ' ' . 'echo' . ' ' . txt . ' | ' .
    \ 'highlight --out-format=rtf' . ' ' .
    \ '--style=' . theme . ' ' .
    \ '--font-size=' . fontSize . ' ' .
    \ '--font=' . font . ' ' .
    \ '--syntax=' . fileType . ' ' .
    \ '--no-trailing-nl' . ' ' .
    \ '|' . ' ' .  'pbcopy'
  silent exec cmd
endfunction

" Move to a split or create one if there is no split in the desired location.
" Args: key
"   key: the hjkl that was pressed.
function! MoveOrCreateWindow(key) abort
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction

" See if there is a tmuxinator project with the name of the current session.
" Return the name of the project if it exists; otherwise, return the empty
" string.
function! GetTmuxinatorProject() abort
  let sname = fnamemodify(v:this_session, ":t:r")
  if filereadable(expand("~/.tmuxinator/" . sname . ".yml"))
    return sname
  else
    return ""
  endif
endfunction

" Open a terminal, if a tmuxinator project exists with the name of the current
" session, open that instead.
function! OpenTerminalOrTmuxinatorProject() abort
  let name = GetTmuxinatorProject()
  if name != ""
    exec 'terminal ++close tmuxinator start ' . name
  else
    exec 'terminal ++close'
  endif
endfunction

" Close the current tmuxinator project.
" Should only be executed inside a terminal window with a running tmux.
" The tmux session should have a shell running at the window with index 0.
" If we're not in a tmuxinator project, send "exit" to the terminal intead.
function! CloseTmuxinatorProject() abort
  let name = GetTmuxinatorProject()
  if name != ""
    call term_sendkeys('', "\<c-b>0")
    sleep 100m
    call term_sendkeys('', "tmuxinator stop " . name . "\<CR>")
  else
    call term_sendkeys('', "exit\<CR>")
  endif
endfunction

" Find out if we are in a git repo
" Based on https://github.com/junegunn/fzf.vim/blob/master/autoload/fzf/vim.vim#L500
function! Is_git_repo() abort
  let root = split(system('git rev-parse --show-toplevel'), '\n')[0]
  return v:shell_error ? 0 : 1
endfunction

" Execute the fzf.vim "GFiles" command, or the "Files" command, if we're not
" in a git repo.
function! FilesOrGFiles() abort
  if Is_git_repo()
    exec 'GFiles'
  else
    exec 'Files'
  endif
endfunction

" Open the pdf of a zotero paper which belongs to a citekey.
" This requires zotero to be open + the zotxt plugin to be installed.
" It probably only works on OSX (due to the use of `open`)
function! OpenCiteKeyPdf(key) abort
  let l:key = expand("<cword>")
  let l:cmd =
        \ 'curl --silent ' .
        \ '''http://127.0.0.1:23119/zotxt/items?format=paths&betterbibtexkey=' .
        \ a:key . "'"
  let l:json = system(l:cmd)
  if l:json != ""
    silent exec '!open ' . shellescape(json_decode(l:json)[0].paths[0])
  else
    echohl WarningMsg | echom l:key "not found" | echohl None
  endif
endfunction

" Commands
" --------

command! -nargs=*          CommentBox  call CommentBox(<q-args>)
command! -nargs=*          CommentLine call CommentLine(<q-args>)
command! -nargs=* -range   Highlight   call Highlight(GetVisualSelection(), <f-args>)

" ------------------- "
" Custom Key Bindings "
" ------------------- "

" Use space as leader
let mapleader = "\<Space>"
" Use backslash as local leader
let maplocalleader = "\\"

" Command Shortcuts
" -----------------
"
"  Prefixes:
"   - <Leader>m for window operations (mnemonic: m for "move")
"   - <Leader>z for spelling operations (mnemonic: z is spell "fix" key)

" Update file
nnoremap <Leader>w :update<CR>
" Turn off search highlighting
nnoremap <Leader>n :nohlsearch<CR>
" Show the visual undo tree
nnoremap <Leader>u :MundoToggle<CR>
" Toggle line numbers
nnoremap <Leader>l :set relativenumber!<CR>
" Toggle rainbow parentheses
nnoremap <Leader>[ :RainbowToggle<CR>
" Open the netrw split
" noremap <Leader>k :Lexplore<CR>
noremap <Leader>k :NERDTreeToggle<CR>

" Terminal
" --------

" Only enable this if our vim has terminal support
if has('terminal')
  " Open a terminal or tmuxinator project if it's available
  nnoremap <Leader>s :call OpenTerminalOrTmuxinatorProject()<CR>
  " Open a standard terminal
  nnoremap <Leader>S :terminal<CR>

  " Detach from tmux
  tnoremap §d <C-b>d
  " Stop the current tmux session
  tnoremap §D <C-W>: call CloseTmuxinatorProject()<CR>

  " Move to other windows easily
  tnoremap §h <C-W>:call MoveOrCreateWindow('h')<CR>
  tnoremap §j <C-W>:call MoveOrCreateWindow('j')<CR>
  tnoremap §k <C-W>:call MoveOrCreateWindow('k')<CR>
  tnoremap §l <C-W>:call MoveOrCreateWindow('l')<CR>

  " Enter terminal normal mode
  tnoremap §p <C-W>N
  " Paste from the system clipboard
  tnoremap §p <C-W>"+
endif

" Spellcheck
" ----------

nnoremap <Leader>zo  :set spell!<CR>
nnoremap <Leader>zn  :setlocal spelllang=nl<CR>
nnoremap <Leader>zeb :setlocal spelllang=en_gb<CR>
nnoremap <Leader>zea :setlocal spelllang=en_us<CR>

" Fuzzy finding
" -------------

" Find a buffer
nnoremap <Leader>b :Buffers<CR>

" Find a file from git or from all files
nnoremap <Leader>f :call FilesOrGFiles()<CR>
nnoremap <Leader>F :Files<CR>

" Find a line in the current buffer or in all the buffers
nnoremap <Leader>g :Lines<CR>
nnoremap <Leader>G :BLines<CR>

" Fuzzy find a session to open
nnoremap <Leader>B :call fzf#run({'source': xolox#session#get_names(0), 'sink': 'OpenSession'})<CR>

" Window Operations
" -----------------
" Map <Leader> m to the window command prefix
nnoremap <Leader>m <C-W>

" Close the current split
nnoremap <silent> <Leader>mx :quit<CR>

" Move to a split or create one
nnoremap <silent> <Leader>mh :call MoveOrCreateWindow('h')<CR>
nnoremap <silent> <Leader>mj :call MoveOrCreateWindow('j')<CR>
nnoremap <silent> <Leader>mk :call MoveOrCreateWindow('k')<CR>
nnoremap <silent> <Leader>ml :call MoveOrCreateWindow('l')<CR>

" Editing
" -------

" Easily get out of insert mode
inoremap fj <Esc>
inoremap jf <Esc>

" Disable arrow keys in normal mode
noremap <up>    : echoe "use k"<CR>
noremap <down>  : echoe "use j"<CR>
noremap <left>  : echoe "use h"<CR>
noremap <right> : echoe "use l"<CR>

" Copy to system clipboard
nnoremap <Leader>y "+y
nnoremap <Leader>d "+d
vnoremap <Leader>y "+y
vnoremap <Leader>d "+d

" Copy from system clipboard, using paste mode
nnoremap <Leader>p :set paste<CR>"+p:set nopaste<CR>
nnoremap <Leader>P :set paste<CR>"+P:set nopaste<CR>
vnoremap <Leader>p :set paste<CR>"+p:set nopaste<CR>
vnoremap <Leader>P :set paste<CR>"+P:set nopaste<CR>

" Split line (inverse of J)
nnoremap gj i<CR><Esc>k$

" Vimrc tweaking
" --------------

nnoremap <Leader>ve :vsplit $MYVIMRC<CR>
